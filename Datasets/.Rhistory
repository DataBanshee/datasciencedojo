?url
conn <- url("https://raw.githubusercontent.com/datasciencedojo/datasets/master/WorldDBTables/CityTable.csv")
dat <- readLines(conn)
head(dat)
class(dat)
dat[3]
dat[3,3]
dat[3][3]
class(dat[3])
dat <- read.csv("https://raw.githubusercontent.com/datasciencedojo/datasets/master/WorldDBTables/CityTable.csv")
head(dat)
install.packages("AzureML")
?AzureML
??AzureML
?install.packages
install.packages(AzureML, type="source")
??AzureML
library(AzureML)
install.packages("AzureML", type="source")
install.packages("AzureML", type = "source")
?install.packages
install.packages("AzureML", type = "source", destdir="C:\Users\Thor\Documents\R\source")
install.packages("AzureML", type = "source", destdir="C:\\Users\\Thor\\Documents\\R\\source")
?par
library(rpart)
?rpart
library(ggplot2)
source('~/Data Science Dojo/Side Projects/auto model builder/buildforest.R')
data(mpg)
mpg$cyl <- as.factor(mpg$cyl)
mpg$class <- as.factor(mpg$class)
mpg.cv <- forest.cv(class ~ hwy + cyl + cty, data=mpg, type='multiclass')
source('~/Data Science Dojo/Side Projects/auto model builder/buildforest.R')
mpg.cv <- forest.cv(class ~ hwy + cyl + cty, data=mpg, type='multiclass')
source('~/Data Science Dojo/Side Projects/auto model builder/buildforest.R')
mpg.cv <- forest.cv(class ~ hwy + cyl + cty, data=mpg, type='multiclass')
?cvTuning
?predict.randomForest
data("environmental")
ozone <- environmental
head(ozone
)
ozone.cv <- forest.cv(ozone ~ radiation + temperature + wind, data=ozone, type='regression')
ozone.cv$model
str(ozone.cv$model)
data(mpg)
str(randomForest(class ~ hwy, data=mpg))
list('double')
ozone.cv$terms
ozone.cv$model$terms
attr(ozone.cv$model$terms, 'variables')
attr(ozone.cv$model$terms, 'variables')[1]
attr(ozone.cv$model$terms, 'variables')[[1]]
attr(ozone.cv$model$terms, 'variables')
class(attr(ozone.cv$model$terms, 'variables'))
eval(attr(ozone.cv$model$terms, 'variables'))
as.list(attr(ozone.cv$model$terms, 'dataClasses')[1])
s <- as.list(attr(ozone.cv$model$terms, 'dataClasses')[1])
s[s=='numeric'] <- 'double'
s
predict(ozone.cv$model, newdata=ozone, type='prob')
predict(ozone.cv$model, newdata=ozone, type='response')
source('C:/git/WebserviceDemos/DevResources/auto model builder/deploymodel.R')
wkID <- 'a0c46e5d5f42466b86230becb3e760eb'
authToken<- 'bc15070ac5474ce98beaff3054973dce'
deploymodel(ozone$cv$model, wkID, authToken)
ozone$cv$model$type
str(ozone$cv$model)
deploymodel(ozone.cv$model, wkID, authToken)
?AzureML
library(json)
install.packages('rjson')
library(rjson)
d <- data.frame()
d$test <- 1:10
d <- data.frame(test=1:10)
d$foo <- 10:20
d$foo <- 11:20
d
d$guu <- 31:40
d
library(lattice)
?densityplot
type="density"
densityplot(~ Petal.Width, data=iris, groups=Species, plot.points=F,
ylab=list(label="Kernel Density of Petal Width", fontsize=20), xlab="",
main=list(label="Density of Petal Width by Species", fontsize=24),
auto.key=list(corner=c(0,0), x=0.4, y=0.8, cex=2), scales=list(cex=1.5),
type="density"
) # cex de
ata=iris, groups=Species, plot.points=F,
ylab=list(label="Kernel Density of Petal Width", fontsize=20), xlab="",
main=list(label="Density of Petal Width by Species", fontsize=24),
auto.key=list(corner=c(0,0), x=0.4, y=0.8, cex=2), scales=list(cex=1.5),
type="percent"
) # cex defines a scale multiplier for text
densityplot(~ Petal.Width, data=iris, groups=Species, plot.points=F,
ylab=list(label="Kernel Density of Petal Width", fontsize=20), xlab="",
main=list(label="Density of Petal Width by Species", fontsize=24),
auto.key=list(corner=c(0,0), x=0.4, y=0.8, cex=2), scales=list(cex=1.5),
type="percent"
) # cex d
?desnity
?density
density(iris$Petal.Width)
densityplot(~ Petal.Width, data=iris, groups=Species, plot.points=F,
ylab=list(label="Kernel Density of Petal Width", fontsize=20), xlab="",
main=list(label="Density of Petal Width by Species", fontsize=24),
auto.key=list(corner=c(0,0), x=0.4, y=0.8, cex=2), scales=list(cex=1.5)
) # cex defines a scale multiplier for text
install.packages('ggplot2')
library(ggplot2)
head(diamond)
head(diamonds)
ggplot(diamonds, aes(x=carat)) + geom_histogram()
layer1 = ggplot(diamonds, aes(x=carat))
layer2=layer1+geom_histogram()
layer2
ggplot(diamonds) + geom_density(aes(x=carat), fill=“gray50”)
layer2=layer1+geom_density()
layer2
layer2=layer1+geom_density()g
layer2=layer1+geom_density()
layer2
layer2
library(rpart)
data(iris)
str(iris)
dim(iris)
summary(iris)
set.seed(27)
iris.train.indices <- sample(1:nrow(iris), 0.7*nrow(iris), replace=F)
head(iris.train.indices)
iris.train <- iris[iris.train.indices,]
dim(iris.train)
iris.test <- iris[-iris.train.indices,]
dim(iris.test)
iris.dt.model <- rpart(Species ~ ., data = iris.train)
?rpart
plot(iris.dt.model)
title(main = "Decision Tree Model of Iris Data")
text(iris.dt.model, use.n = TRUE)
plot(iris.dt.model)
title(main = "Decision Tree Model of Iris Data")
text(iris.dt.model, use.n = TRUE)
?rpart
summary(iris.dt.model)
source('~/Data Science Dojo/5 Day Bootcamp/Decision_Tree/Code/Decision_Tree_Iris_Data.R', echo=TRUE)
iris.dt.predictions <- predict(iris.dt.model, iris.test, type = "class")
iris.dt.confusion <- table(iris.dt.predictions, iris.test$Species)
print(iris.dt.confusion)
print(iris.dt.model)
a <-1
install.packages('GGally')
library(GGally)
ggpairs(iris)
library(ggplot2)
ggpairs(iris, aes(color=Species))
library(GGally)
ggpairs(iris, ggplot2::aes(color=Species))
ggpairs(iris, color=Species)
ggpairs(iris, color='Species')
ggpairs(iris, colour='Species')
library(ggplot2)
ggpairs(iris, aes(colour='Species'))
ggpairs(iris, aes(colour=Species))
setwd("~/Data Science Dojo/5 Day Bootcamp/Datasets")
ozone <- read.table('ozone.data', header=T)
head(ozone)
write.csv(ozone, 'ozone.csv')
write.csv(ozone, 'ozone.csv', row.names=F)
xyplot(Sepal.Width ~ Sepal.Length, data=iris, groups=Species, auto.key=list(corner=c(0,0), x=0, y=0.85, cex=1.5), cex=1.5, scales=list(cex=1.5))
library(lattice)
xyplot(Sepal.Width ~ Sepal.Length, data=iris, groups=Species, auto.key=list(corner=c(0,0), x=0, y=0.85, cex=1.5), cex=1.5, scales=list(cex=1.5))
