?as.data.frame.matrix
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("Sex", "Age", "Fare", "Embarked", "AccommodationClass", "SiblingSpouse", "ParentChild"),
"Values" = list( list( "male", "24", "20", "C", "3", "1", "0" ),  list( "female", "24", "20", "C", "3", "1", "0" )  )
)                ),
GlobalParameters = fromJSON('{}')
)
body = toJSON(req)
api_key = "/I0Jac1senRa+2o9Ngdt3H/MS5cAsZ82+V0kmmvNWvtpjQDIA+HcRAeXFQ7vZDttaSQwc2jNWvqbzEwT1zM7Kg==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/fd58f5c122e5436a88c515294305f0eb/services/f81142a8797046819f49ad41826c7f88/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
myfunction <- function(Sex, Age, Fare, Embarked, AccommodationClass, SiblingSpouse, ParentChild){
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("Sex", "Age", "Fare", "Embarked", "AccommodationClass", "SiblingSpouse", "ParentChild"),
"Values" = list( list( Sex, Age, Fare, Embarked, AccommodationClass, SiblingSpouse, ParentChild ) )
)                ),
GlobalParameters = fromJSON('{}')
)
body = toJSON(req)
api_key = "/I0Jac1senRa+2o9Ngdt3H/MS5cAsZ82+V0kmmvNWvtpjQDIA+HcRAeXFQ7vZDttaSQwc2jNWvqbzEwT1zM7Kg==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/fd58f5c122e5436a88c515294305f0eb/services/f81142a8797046819f49ad41826c7f88/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
}
myfunction("female", "24", "20", "C", "3", "1", "0")
myfunction("female", "24", "20", "Q", "3", "1", "0")
myfunction("male", "24", "20", "Q", "3", "1", "0")
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("Sex", "Age", "Fare", "Embarked", "AccommodationClass", "SiblingSpouse", "ParentChild"),
"Values" = list( list( "male", "24", "20", "C", "3", "1", "0" ),  list( "female", "24", "20", "C", "3", "1", "0" )  )
)                ),
GlobalParameters = fromJSON('{}')
)
body = toJSON(req)
api_key = "w50pkw2RqEw1PHQvJi1BW+UiNvYyMu+6PlunCha4ApMwtFC1ZOtsRf2F3IamxFNEffeImCErsY6ROmCYDOV5ew==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/fd58f5c122e5436a88c515294305f0eb/services/cf47443e49a1486a99ce1c94fa035342/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
myFunction <- function(Sex, Age, Fare, Embarked, AccommodationClass, SiblingSpouse, ParentChild){
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(
Inputs = list(
"input1" = list(
"ColumnNames" = list("Sex", "Age", "Fare", "Embarked", "AccommodationClass", "SiblingSpouse", "ParentChild"),
"Values" = list( list( Sex, Age, Fare, Embarked, AccommodationClass, SiblingSpouse, ParentChild ),  list( "female", "24", "20", "C", "3", "1", "0" )  )
)                ),
GlobalParameters = fromJSON('{}')
)
body = toJSON(req)
api_key = "w50pkw2RqEw1PHQvJi1BW+UiNvYyMu+6PlunCha4ApMwtFC1ZOtsRf2F3IamxFNEffeImCErsY6ROmCYDOV5ew==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/fd58f5c122e5436a88c515294305f0eb/services/cf47443e49a1486a99ce1c94fa035342/execute?api-version=2.0&details=true",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
}
myFunction("male", "24", "20", "C", "3", "1", "0")
myFunction("female", "24", "20", "C", "3", "1", "0")
c(2, 3, 4 ,5)
data(iris)
iris
names(iris)
head(iris)
c(1, 2, 3, 4, 5)
a <- c(1, 2, 3, 4, 5)
names(iris) <- a
names(iris)
head
head(iris)
data(iris)
iris
a <- iris
lapply(iris)
lapply(iris$Species)
class
class(iris)
class(iris$Species)
c(1, 2, 3, 4, 5, 6, 7, 8)
a <- c(1, 2, 3, 4, 5, 6, 7, 8)
b <- c(4, 5, 6, 7)
a * b
c <- "hello world"
print(c)
cat(c)
#sup
#helloevan'
c <- "hello"
d <- "evan"
e <- c + d
e <- paste(c, d)
e
n<- 10
0.3 -> s
m = true
m = TRUE
i <- Infinity
i <- Inf
i
e <- 5l
e <- el
e <- 5L
e
1/Inf
2/0
x <- as.Date("2015-03-26")
x
class(x)
x
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
cat(p)
print(pp)
print(p)
names(unclass(p))
unclass(p)
names(p)
p$sec
p$ydady
p$yday
x <- strptime
x
strptime("March 26, 2015 12:30", "%B %d, %Y %H:%M")
x <- vector("numeric", length = 10)
x
y <- vector(1, 2, 3, 5, 6)
x <- c(0.5, 0.6)
x
c(Inf, 0, True, T, 0, 0.5)
c(Inf, 0, TRUE, T, 0, 0.5)
c(Inf, 0, TRUE, T, 0, 0.5, "hello")
x <- 1:20
x
c(1:20)
c
e <-c(1:20)
e
x <- list(1, "a", Inf, TRUE, T, 1 + 4i)
x
x <- list(1, "a", Inf, TRUE, T, 1 + 4*i)
x
i
x <- list(a=c(T, T, F, F), b=2)
x
x <- factor(c("yes", "yes", "no"))
x
x <- factor(c(TRUE, FALSE))
x
x <- factor(c(INF))
x <- factor(c(Inf))
x
x <- factor(c(0.))
x
x <- factor(c(yes))
x <- factor(c("yes"))
x <- factor(c("yes", "no", "yes", "yes"))
unclass(x)
table(x)
attr(,"levels")
attr(x,"levels")
factor(x, levels=c("no", "yes"))
m <- matrix (nrow = 2, ncol = 3)
dim(m)
attributes(m)
m
m <- matrix(1:6)
m
m <- matrix(1:6, nrow = 2, ncol = 3)
m
dim(m)
dim(m) = c(2,5)
m <- 1:10
dim(m) = c(2,5)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
list(c("a", "b"), c("c", "d"))
a <- list(c("a", "b"), c("c", "d"))
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m)
m
dimnames <- a
m
score <- c(90, 79, 94, 54)
mapply(rep, c(0,2), c(3,2))
mapply(rep, c(0,2), c(3, 2))
rep
rep(2)
str(tapply)
str(lapply)
str(mapply)
install.packages('xls')
install.packages('xlsx')
library(RCurl)
x <- getURL("https://raw.githubusercontent.com/datasciencedojo/datasets/master/Titanic_train.csv")
x <- getURL("https://raw.githubusercontent.com/datasciencedojo/datasets/master/Titanic_train.csv")
library(RCURL)
install.packages(RCurl)
install.packages("RCurl")
install.packages("RCurl")
library("RCurl")
x <- getURL("https://raw.githubusercontent.com/datasciencedojo/datasets/master/Titanic_train.csv")
library("RCurl")
x <- getURL("https://raw.githubusercontent.com/datasciencedojo/datasets/master/Titanic_train.csv")
library('randomForest')
randomForest(iris)
x.trained <-randomForest(x=iris)
x.trained
help randomForest()
MDSplot(iris.urf, iris$Species)
iris.urf <- randomForest(iris[, -5])
, -5])
MDSplot(iris.urf, iris$Species)
rpart()
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
plot(mtcars.rf, log="y")
varImpPlot(mtcars.rf)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
plot(mtcars.rf, log="y")
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
plot(mtcars.rf, log="y")
varImpPlot(mtcars.rf)
importance(mtcars.rf)
importance(mtcars.rf)
data(mtcars)
mtcars.rf <- randomForest(mpg ~ ., data=mtcars, ntree=1000, keep.forest=FALSE,
importance=TRUE)
plot(mtcars.rf, log="y")
varImpPlot(mtcars.rf)
mtcars.rf2 <- randomForest(mtcars)
MDSplot(mtcars.rf2, mtcars$mpg)
MDSplot(mtcars.rf2)
MDSplot(mtcars.rf2, mtcars$mpg)
mtcars$mpg
MDSplot(mtcars.rf2, mtcars$mpg)
getTree(mtcars.rf)
getTree(randomForest(iris[,-5], iris[,5], ntree=10), 3, labelVar=TRUE)
q()
iris.rf <- randomForest(Species~.data=iris,importance=True)
library(randomForest)
iris.rf <- randomForest(Species~.data=iris,importance=True)
iris.rf <- randomForest(Species~.,data=iris,importance=True)
iris.rf <- randomForest(Species~.,data=iris,importance=TRUE)
importance(iris.rf)
plot(importance(iris.rf))
round(importance(iris.rf),2)
is.na
setwd(/c/)
setwd("/c/")
setwd("C:\)
setwd("C:\")
setwd("C:\")
setwd("C:/")
setwd("C:/GitRepos/bootcamp")
setwd("C:/GitRepos/bootcamp/dataset")
setwd("C:/GitRepos/bootcamp/datasets")
titanic <- read.csv("titanic.csv")
is.NA(titanic$Age)
is.NA(titanic$Age)
is.na(titanic$Age)
titanic[is.na(titanic$Age),]
median(titanic$Age)
median
median(median, na.rm = TRUE)
median(titanic$Age, na.rm = TRUE)
medianValue = median(titanic$Age, na.rm = TRUE)
is.NA = titanic$Age
is.na(titanic$Age)
titanic[is.na(titanic$Age)<= medianValue,]
titanic$age
titanic$Age
titanic.cleaned = titanic[is.na(titanic$Age)<= medianValue,]
titanic.cleaned$Age
titanic[is.na(titanic$Age) <= median(titanic$Age, na.rm=TRUE)
]
titanic[is.na(titanic$Age)] <= median(titanic$Age, na.rm=TRUE)
titanic[is.na(titanic$Age)]$Age <= median(titanic$Age, na.rm=TRUE)
titanic[is.na(titanic$Age)]
titanic$Age
is.na(titanic$Age)
titanic[is.na(titanic$Age),]
titanic[is.na(titanic$Age),]$Age
titanic[is.na(titanic$Age),]$Age <= median(titanic$Age, na.rm=TRUE)
titanic[is.na(titanic$Age),] <= median(titanic$Age, na.rm=TRUE)
titanic[is.na(titanic$Age)]
titanic[is.na(titanic$Age),]
titanic[is.na(titanic$Age),] = median(titanic$Age, na.rm=TRUE)
titanic$Age
titanic
titanic <- read.csv("titanic.csv")
titanic[is.na(titanic$Age),]$Age = median(titanic$Age, na.rm=TRUE)
titanic
summary(titanic$AGe)
summary(titanic$Agee)
summary(titanic$Age)
stats(titanic$Age)
levels(titanic$Age)
is.na(titanic$AGe)
is.na(titanic$Age)
level(is.na(titanic$Age))
levels(is.na(titanic$Age))
