crude.stem <- lapply(crude, function(x) wordStem(x$content))
?wordStem
?Rstem
crude.content <- lapply(crude, function(x) x$content)
getTokenizers()
crude.stems <- lapply(crude, function(x) stemDocument(x$content))
install.packages('SnowballC')
crude.stems <- lapply(crude, function(x) stemDocument(x$content))
stemDocument(crude[[1]])
crude[[1]]
?stemDocument
crude.stems <- lapply(crude, stemDocument)
crude.processed <- lapply(crude, removePunctuation)
crude.stems <- lapply(crude.processed, stemDocument)
crude.dt <- DocumentTermMatrix(crude.stems, control=list(weighting=weightTfIdf))
crude.dt <- DocumentTermMatrix(crude, control=list(weighting=weightTfIdf,
removePunctuation=T,
stemming=T))
inspect(crude.dt)
str
str(crude.dt)
dissimilarity(crude.dt, method="cosine")
?kmeans
install.packages('proxy')
library(proxy)
dissimilarity(crude.dt, method='cosine')
?proxy
?dist
dist(x, method="cosine")
dist(crude.dt, method="cosine")
install.packages('lsa')
library(lsa)
cosine(course.dt)
cosine(crude.dt)
print(crude.dt)
head(crude.dt)
str(crude.dt)
head(crude.dt$v)
tail(crude.dt$v)
?countour
?contour
?image
install.packages('plot3D')
install.packages('misc3d')
library(plot3D
)
?surf3D
X <- seq(-10,10,.1)
Y <- seq(-10,10,.1)
M <- mesh(X, Y)
Z <- (X + Y)^2
Z <- (X + Y)^2/2
surf3D(X,Y,Z,colvar=NA)
x <- M$x
y <- M$y
z <- (x+y)^2
surf3D(x,y,z,colvar=NA)
surf3D(x,y,z,colvar=y)
surf3D(x,y,z,colvar="grey", theta=60, contour=True )
surf3D(x,y,z,col="grey", theta=60, contour=True)
surf3D(x,y,z,col="grey", theta=60, contour=True)
surf3D(x,y,z,col="grey", theta=60, contour=true)
surf3D(x,y,z,col="grey", theta=60, contour=T)
surf3D(x,y,z,col="grey", theta=60, contour=T, add=T)
perspbox(X,Y,z)
perspbox(X,Y,z, bty='b2')
perspbox(X,Y,z, bty='b2',phi=10)
perspbox(X,Y,z, bty='b1',phi=10)
perspbox(X,Y,z, bty='b',phi=10)
perspbox(X,Y,z, bty='g',phi=10)
perspbox(X,Y,z, bty='bl',phi=10)
perspbox(X,Y,z, bty='bl2',phi=10)
perspbox(X,Y,z, bty='u',phi=10, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1)
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1)
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed")
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
library(extrafont
)
windowsFonts(Arial='Arial Unicode MS')
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,col="grey", theta=60, contour=T, add=T)
z <- x^2 + y^2
surf3D(x,y,z,col="grey", theta=60, contour=T, add=T)
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,col="grey", theta=60, contour=T, add=T)
?surf3D
surf3D(x,y,z,colvar=y, col="grey", theta=60, contour=T, add=T)
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=F, border='black', theta=60, contour=T, add=T)
X <- -10:10
Y <- -10:10
M <- mesh(X,Y)
Z <- X^2 + Y^2
x <- M$x
y<- M$y
x <- x^2 + y^2
surf3D(x,y,z,colvar=y, col="grey", facets=F, border='black', theta=60, contour=T, add=T)
x <- M$x
z <- x^2 + y^2
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=F, border='black', theta=60, contour=T, add=T)
surf3D(x,y,z,colvar=y, col="grey", facets=NA, border='black', theta=60, contour=T, add=T)
perspbox(X,Y,z, bty='u',phi=20, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=NA, border='black', theta=60, contour=T, add=T)
perspbox(X,Y,z, bty='u',phi=30, theta=60 col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
perspbox(X,Y,z, bty='u',phi=30, theta=60, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
perspbox(X,Y,z, bty='u',phi=30, theta=60 col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=NA, border='black', theta=60, contour=T, add=T)
perspbox(X,Y,z, bty='u',phi=25, theta=60 col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
perspbox(X,Y,z, bty='u',phi=25, theta=60, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=NA, border='black', theta=60, contour=T, add=T)
surf3D(x,y,z,colvar=y, col="grey", facets=T, border='black', theta=60, contour=T, add=T)
M <- mesh(-5:5,-5:5)
x <- M$x
y <- M$y
z <- x^2 + y^2
perspbox(X,Y,z, bty='u',phi=25, theta=60, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=T, border='black', theta=60, contour=T, add=T)
perspbox(y,x,z, bty='u',phi=25, theta=60, col.axis = "black", col.panel="white", col.grid="grey", lwd.panel=1, lwd.grid=1, xlab="\u03B8\u2080", ylab="\u03B8\u2081", zlab="J(\u03B8)", ticktype="detailed", family='Arial')
surf3D(x,y,z,colvar=y, col="grey", facets=T, border='black', theta=60, contour=T, add=T)
setwd("~/bootcamp")
ozone.data <- read.table("Datasets/Ozone/ozone.data", header=T)
set.seed(27)
ozone.train.indices <- sample(1:nrow(ozone.data), 0.7*nrow(ozone.data), replace=F)
ozone.train <- ozone.data[ozone.train.indices,]
dim(ozone.train)
## Use the remaining 30% as testing data
ozone.test <- ozone.data[-ozone.train.indices,]
dim(ozone.test)
ozone.lm.model <- lm(ozone ~ ., data=ozone.train)
summary(ozone.lm.model)
ozone.lm.predictions <- predict(ozone.lm.model, ozone.test)
par(mfrow=c(3,1))
plot(ozone.test$ozone, ozone.lm.predictions)
par(mfrow=c(1,1))
library(ggplot2)
g <- ggplot(data=ozone.train, aes(y=ozone))
g + geom_plot(aes(x=temperature))
g + geom_point(aes(x=temperature))
ozone.lm.model <- lm(ozone ~ temperature, data=ozone.train)
ozone.lm.predictions <- predict(ozone.lm.model, ozone.test)
summary(ozone.lm.model)
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3)
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, aes(color='red',size=2'))
)
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, aes(color='red',size=2'))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2'))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=16))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=16))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=16), axis.text=element_text(size=10))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=16), axis.text=element_text(size=12))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=16), axis.text=element_text(size=13))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=16), axis.text=element_text(size=14))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=10, family='Arial') + theme(axis.title=element_text(size=18), axis.text=element_text(size=14))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + annotate('text', x=70, y=75, label='\u03B8\u2080 = -140, \u03B8\u2081 = 2.3', color='blue', size=14, family='Arial') + theme(axis.title=element_text(size=16), axis.text=element_text(size=14))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + theme(axis.title=element_text(size=16), axis.text=element_text(size=14))
g <- ggplot(data=ozone.test, aes(y=ozone))
g + geom_point(aes(x=temperature)) + geom_abline(intercept=-140, slope=2.3, mapping=aes(color='red', size=2)) + theme(axis.title=element_text(size=16), axis.text=element_text(size=14))
ozone.lm.residuals <- ozone.test$ozone - ozone.lm.predictions
plot(ozone.test$ozone, ozone.lm.predictions)
plot(ozone.test$ozone, ozone.lm.predictions, xlab='True Value', ylab='Predicted Value')
plot(ozone.test$ozone, ozone.lm.predictions, xlab='True Value', ylab='Predicted Value', main='Ozone Test True vs Predicted)
plot(ozone.test$ozone, ozone.lm.predictions, xlab='True Value', ylab='Predicted Value', main='Ozone Test True vs Predicted')
plot(ozone.test$ozone, ozone.lm.residuals, xlab='True Value', ylab='Residual', main='Ozone Test True Value vs Residuals')
plot(ozone.test$ozone, ozone.lm.residuals, xlab='True Value', ylab='Residuals', main='Ozone Test True Value vs Residuals')
ozone.lm.rmse <- sqrt(mean(ozone.lm.residuals^2))
print(ozone.lm.rmse)
ozone.lm.mae <- mean(abs(ozone.lm.residuals))
print(ozone.lm.mae)
head(ozone.test)
head
head(ozone.lm.predictions)
head(abs(ozone.lm.predictions-ozone.test$ozone))
mean(head(abs(ozone.lm.predictions-ozone.test$ozone)))
sum(head(abs(ozone.lm.predictions-ozone.test$ozone)))
mean(head(abs(ozone.lm.predictions-ozone.test$ozone))^2)
head(abs(ozone.lm.predictions-ozone.test$ozone))^2
sum(head(abs(ozone.lm.predictions-ozone.test$ozone))^2)
sqrt(mean((head(abs(ozone.lm.predictions-ozone.test$ozone))^2))
)
ozone.lm.r2 <- rSquared(ozone.lm.predictions, ozone.lm.residuals)
library(miscTools)
ozone.lm.r2 <- rSquared(ozone.lm.predictions, ozone.lm.residuals)
print(ozone.lm.r2)
install.packages('RCurl')
library(RCurl)
output.raw <- getURL("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data", .opts = list(ssl.verifypeer = FALSE))
data.raw <- read.table(text = output.raw, header = FALSE)
setwd("~/")
write.table(data.raw, "AutoMPG.txt", sep="\t")
auto.data <- read.table("autoMPG.txt", header = TRUE)
auto.names <- c("mpg", "cyl", "disp", "horsepow", "weight", "accel", "year", "country", "name")
colnames(auto.data) <- auto.names
auto.data[auto.data = "?",] <- NA
auto.data[auto.data == "?",] <- NA
auto.data[auto.data == "?" <- NA]
auto.data <- is.na(auto.data) == NA
View(auto.data)
View(auto.data)
auto.data <- read.table("autoMPG.txt", header = TRUE)
auto.names <- c("mpg", "cyl", "disp", "horsepow", "weight", "accel", "year", "country", "name")
auto.data[auto.data == "?"] <- NA
colnames(auto.data) <- auto.names
auto.data <- read.table("autoMPG.txt", header = TRUE)
colnames(auto.data) <- auto.names
auto.data[auto.data == "?", 'horsepow'] <- NA
auto.data[auto.data$horsepow == "?", 'horsepow'] <- NA
nrow(subset(auto.subset, mpg > 20))
auto.subset <- auto.clean[c(1,2)]
auto.clean <- na.omit(auto.data)
auto.subset <- auto.clean[,c(1:2)]
nrow(subset(auto.subset, mpg > 20))
length(auto.subset$mpg[auto.subset$mpg > 20])
nrow(auto.subset$mpg[mpg > 20])
length(auto.subset[mpg > 20])
True
TREUE
TRUE
libray(plyr)
library(plyr)
?plyr
data()
head(mtcars)
?head
tail(mtcars)
tail(mtcars, n=-4)
dim(mtcars)
colnames(mtcars)
colnames(mtcars)[2] <- "cylinders"
colnames(mtcars)
?mtcars
?boxplot
?write.csv
?read.csv
mtcars[['gear']] <- as.factor(mtcars[['gear']])
summary(mtcars)
mtcars.4 <- mtcars[mtcars$cyl==4,]
head(mycars.4)
head(mtcars.4)
mtcars.4 <- mtcars[mtcars$cyl==4]
mtcars.4 <- mtcars[mtcars$cyl==4,'cyl']
mtcars.4 <- mtcars[mtcars$cyl==4,'cyl']
mtcars.4 <- mtcars[mtcars$cyl==4,]
?write.csv
?read.csv
a = 3
b <- 6
7 -> c
a <- 23
?plot
??matrices
help.start
help.start()
help.search('matrices')
data()
library(ggplot2)
data()
data(iris)
a <- 5
type(a)
class(a)
b <- 5L
class(B)
class(b)
c <- 3 + 5i
class(c)
c + b
c - b
c - bi
c - b*i
c - b
inf
Inf
1/Inf
a.s <- "Hello, World"
class(a.s)
a.s <- "H"
class(a.s)
a.s <- "Hello, World"
iris.data <- iris
bool <- TRUE
class(bool)
bool <- T
class(bool)
bool <- FALSE
bool <- F
irisData
f.1 <- Species ~ Sepal.Legth + Sepal.Width
class(f.1)
head(iris)
v.1 <- c(1, 2, 3, 5, 27)
v.a
v.1
class(v.1)
v.2 <- c("Hello", "World", "How's", "It", "Going")
v.2
class(v.2)
v.3 <- c("Hello", "World", "How's", "It", "Going", 5)
class(v.3)
v.3
v.3[2]
v.3[2:3]
v.3[2:4]
v.3[1]
v.3[0]
v.3[10]
v.3[7]
v.3[6\]
v.3[6]
2:4
v.3[c(1,5,6)]
v.1
v.1[v.1>4]
v.1[v.1 > 4]
1:4
1:5:6
iris.species <- iris$Species
iris.species
class(iris.species)
cities <- c("New York", "Chicago", "Seattle", "New York", "San Jose")
class(cities)
as.factor(cities)
cities.fac <- as.factor(cities)
levels(cities)
level(cities)
levels(cities.fac)
levels(cities.fac)[2] <- "New Jersey"
cities.fac
v.1
v.2
v.2
v.4
v.3
v.4 <- c(5,6,7,8,27)
cbind(v.1,v.4)
rbind(v.1,v.4)
mat <- cbind(v.1,v.4)
class(mat)
dim(mat)
mat[1,3]
mat[3,2]
mat
colnames(mat)
colnames(mat) <- "Brian"
colnames(mat) <- c("Brian", "Bryan")
mat
rownames(mat) <- c("A", "B", "C", "D", "Total")
mat
rownames(mat)
vec <- (1,2,3)
vec <- [1,2,3]
vec <- c(1,2,3)
vec
class(iris.data)
head(iris.data)
tail(iris.data)
head(iris.data, n=2)
head(iris.data)
iris.data[4,3]
iris.data[4,]
iris.data[,2]
iris.data[4:7,]
iris.data[c(2,4,6),]
iris.data[,c(1,4)]
hea(iris.data)
head(iris.data)
iris.data[3:5,'Petal.Width']
iris.data[3:5,'Petal.Length']
iris.data[3:5,c('Sepal.Length', "Sepal.Width")]
head(iris.data$Sepal.Width)
nat
mat
as.data.frame(mat)
df.1 <- as.data.frame(mat)
cbind(df.1,v.2)
head(iris.data[,c("Sepal.Length", "Species")])
head(iris.data[10:20,c("Sepal.Length", "Species")])
iris.data[10:20,c("Sepal.Length", "Species")]
head(iris.data[,c("Sepal.Length", "Species")])
l.1 <- list(1, "a", True, 1+4i, c(26, 28, 19))
l.1 <- list(1, "a", TRUE, 1+4i, c(26, 28, 19))
l.1
l.1 <- list(1, "a", TRUE, 1+4i, c(26, 28, 19), data)
l.1
l.1 <- list(1, "a", TRUE, 1+4i, c(26, 28, 19))
l.1
l.1[[4]]
l.2 <- list(a=c(T,T,F,F), b=2, hello="World")
l.2
l.2$hello
a
b <- "56"
b
a + as.numeric(b)
is.vector(a)
is.vector(iris.data)
is.vector(l.1)
is.vector(l.2)
is.list(l.1)
is.list(iris.data)
is.list(a)
names(l.2)
NA
l.2$a <- NA
l.2
is.na(l.2)
NaN
Inf*0
is.nan(Inf*0)
install.packages(c("plyr", "lattice"))
install.packages(c("plyr"))
install.packages('randomForest')
?randomForest
library(randomForest)
?randomForest
getwd()
setwd('bootcamp')
getwd()
setwd("~/bootcamp/Datasets/Wine_Quality")
setwd("~/bootcamp")
dir()
setwd("~/bootcamp/Introduction_to_R_Programming")
source('Intro_to_R_programming_script.R')
v <- c("New York", "Chicago", "Seattle", "San Jose", "Gary", "Seattle",
"Seattle", "San Jose", "New York", "New York", "New York")
v.factor <- as.factor(v) # This is an inline comment
v
v.factor <- as.factor(v) # This is an inline comment
v.factor
levels(v.factor) <- c("Chicago", "Gary", "Brooklyn", "San Jose", "Seattle")
v.factor
length(v.factor)
# Data frame examples
data("iris")
names(iris)
nrow(iris)
ncol(iris)
dim(iris)
names(iris)
head(iris)
ozone.data <- read.table(ozone.dat)
setwd("~/bootcamp/Introduction_to_R_Programming")
ozone.data <- read.table(ozone.dat)
ozone.data <- read.table('ozone.dat')
setwd("~/bootcamp/Datasets")
ozone.data <- read.table('ozone.data')
head(ozone.data)
ozone.data <- read.table('ozone.data', header=T)
head(ozone.data)
titanic.data <- read.csv('titanic.csv')
head(titanic)
head(titanic.data)
class(titanic.data)
class(ozone.data)
head(ozone)
head(ozone.data)
ozone.mat <- as.matrix(ozone.data)
head(ozone.mat)
ozone.new <- ozone.data
ozone.new$ozone <- ozone.data / 10
head(ozone.new)
ozone.new <- ozone.data
ozone.new$ozone <- ozone.data$ozone / 10
head(ozone.new)
write.csv('ozone_new.data', ozone.new)
?write.csv
write.csv(ozone.new, 'ozone_new.data')
write.csv(ozone.new, 'ozone_new.data', row.names=F)
write.csv(ozone.new, 'ozone_new.data', row.names=F, col.names=F)
write.csv(ozone.new, 'ozone_new.data', row.names=F)
save(ozone.data)
save(ozone.data, "ozone.rdata")
save(ozone.data, file="ozone.rdata")
load('ozone.rdata')
levels(iris.data$Species)
levels(iris.data$Species)[2] <- "vers3color"
levels(iris.data$Species)
levels(iris.data$Species)[2] <- "versicolor"
levels(iris.data$Species)
head(iris.data)
tail(iris.data, n=10)
str(iris.data)
str(l.2)
str(l.1)
str(l.3)
str(l.1)
str(l.2)
sum(iris.data$Sepal.Width)
sum(iris.data)
sum(iris.data[,-5])
mean(iris.data$Petal.Width)
stdev(iris.data$Petal.Width)
var(iris.data$Petal.Width)
summary(iris.data)
?apply
apply(iris.data[,-5],2,sum)
?lapply
apply(iris.data[,-5],2, mean)
library(plyr)
?plyr
plot(iris.data$Petal.Width,iris.data$Sepal.Width)
par)_
par()
par(mfrow=c(2,2))
plot(iris.data$Sepal.Length,iris.data$Sepal.Width)
plot(iris.data$Sepal.Length,iris.data$Petal.Width)
plot(iris.data$Sepal.Length,iris.data$Petal.Length)
plot(iris.data$Sepal.Width,iris.data$Petal.Length)
library(lattice)
library(ggplot2)
boxplot(iris.data$Petal.Width)
