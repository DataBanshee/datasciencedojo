install.packages(c("miscTools", "animation", "lattice", "rpart", "party", "randomForest", "bst", "AUC", "pROC", "e1071", "klaR", "ElemStatLearn", "glmnet", "Metrics", "stats", "fpc", "ggplot2"))
install.packages(c("miscTools", "animation", "lattice", "rpart", "party", "randomForest", "bst", "AUC", "pROC", "e1071", "klaR", "ElemStatLearn", "glmnet", "Metrics", "fpc", "ggplot2"))
install.packages('caret')
library(ggplot2)
x <- seq(0,1,0.01)
y <- ln(logit(x))
y <- log(logit(x))
library(boot)
y <- log(logit(x))
?boot
?logit
y <- log(x)
g <- ggplot(aes(x=x,y=y)) + geom_line()
g <- ggplot(data=cbind(x,y)aes(x=x,y=y)) + geom_line()
g <- ggplot(data=cbind(x,y),aes(x=x,y=y)) + geom_line()
d <- data.frame(x=x,y=y)
g <- ggplot(data=d,aes(x=x,y=y)) + geom_line()
g
d$y <- -log(x)
g
g <- ggplot(data=d,aes(x=x,y=y)) + geom_line()
g
g + labs(title="Cost for y = 1", x="h[\u03B8](x)", y = "P[\u03B8](1|x)")
g + labs(title="Cost for y = 1", x=expression(h[\u03B8](x)), y = "P[\u03B8](1|x)")
g + labs(title="Cost for y = 1", x=expression(h["\u03B8"](x)), y = "P[\u03B8](1|x)")
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = "P[\u03B8](1|x)")
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta](1|x))
)
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")
)
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)"))
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(axis.title=element_text(size=16))
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=16))
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.ticks=element_text(size=18), line=element_line(size=3))
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18), line=element_line(size=3))
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18)
)
g <- ggplot(data=d, aes(x=x,y=y)) + geom_line(size=3)
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18))
g <- ggplot(data=d, aes(x=x,y=y)) + geom_line(size=2)
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18))
d$y <- log(1-x)
g <- ggplot(data=d, aes(x=x,y=y)) + geom_line(size=2)
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18))
d$y <- -log(1-x)
g <- ggplot(data=d, aes(x=x,y=y)) + geom_line(size=2)
g + labs(title="Cost for y = 1", x=expression(h[theta](x)), y = expression(P[theta]*"(1|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18))
g + labs(title="Cost for y = 0", x=expression(h[theta](x)), y = expression(P[theta]*"(0|x)")) + theme(title=element_text(size=24), axis.text=element_text(size=18))
source('C:/git/WebserviceDemos/DevResources/auto model builder/buildforest.R')
source('C:/git/WebserviceDemos/DevResources/auto model builder/deploymodel.R')
m = forest.caret.cv(Species ~ ., data=iris, type='multiclass')
endpoints <- deploycaretmodel(m, ID, AT)
endpoints
endpoints$endpoints
endpoints$endpoints$ApiLocation
endpoints$endpoints[[1]]$ApiLocation
source('C:/git/WebserviceDemos/awsPage/serenity/R/deploymodel.R')
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
model <- gbm.caret.cv(formula('Species ~ .'), iris, 'multiclass')
e <- deploy.caret(model, 'a0c46e5d5f42466b86230becb3e760eb', 'bc15070ac5474ce98beaff3054973dce')
update.packages('AzureML')
?update.packages
update.packages()
schema.input <- as.list(attr(trainedModel$terms, 'dataClasses')[-1])
schema.input[schema.input=='numeric'] <- 'float'
schema.output <- vector(mode='character', length=length(levels(trainedModel$predicted)))
schema.output[] <- "double"
schema.output <- as.list(schema.output)
names(schema.output) <- levels(trainedModel$predicted)
schema.output
schema.output <- vector(mode='character', length=length(levels(trainedModel$predicted)))
trainedModels$predicted
trainedModel$predicted
trainedModel$levels
trainedModel$modelInfo$levels
trainedModel$modelInfo$levels()
trainedModel
str(trainedModel)
trainedModel$pred
trainedModel$terms
trainedModel$trainingData
trainedModel$trainingData[,.outcome]
trainedModel$trainingData[,'.outcome']
schema.output <- vector(mode='character', length=length(levels(trainedModel$trainingData[,'.outcome'])))
schema.output
trainedModel <- forest.caret.cv(Species ~ ., iris, "multiclass")
trainedModel$trainingData[,'.outcome']
deploy.caret(trainedModel, 'a0c46e5d5f42466b86230becb3e760eb', 'bc15070ac5474ce98beaff3054973dce')
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
trainedModel <- forest.caret.cv(Species ~ ., iris, "multiclass")
deploy.caret(trainedModel, 'a0c46e5d5f42466b86230becb3e760eb', 'bc15070ac5474ce98beaff3054973dce')
?trainControl
?train
?twoClassSummary
print(twoClassSummary)
print(mnLogLoss)
?apply
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
data(kyphosis
)
library(rpart
)
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Precision')
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Precision')
print(twoClassSummary)
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Precision')
warnings()
model$results
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Recall')
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Recall')
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Recall')
warnings()
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
model <- forest.caret.cv(Kyphosis ~ ., data=kyphosis, type='twoclass', cost='Recall')
?gbm
source('C:/git/WebserviceDemos/DevResources/auto model builder/buildforest.R')
source('C:/git/WebserviceDemos/DevResources/auto model builder/deploymodel.R')
c.m <- forest.caret.cv(Species ~ ., iris, type='multiclass')
source('C:/git/WebserviceDemos/awsPage/serenity/R/buildforest.R')
c.m <- forest.caret.cv(Species ~ ., iris, type='multiclass')
c.m <- forest.caret.cv(Species ~ ., iris, type='multiclass', cost='mlogloss')
deploycaretmodel(c.m, ID, AT)
setwd("~/bootcamp/Datasets")
titanic <- read.csv("titanic.csv")
head(titanic)
levels(Embarked)
levels(titanic$Embarked)
colnames(titanic)[5] <- "Gender"
levels(titanic$Survived) <- c(“Dead”, “Survived”)
levels(titanic$Embarked) <- c("Unknown", "Cherbourg", 				"Queenstown", "Southampton")
str(titanic[,c("Embarked","Survived")]
levels(titanic$Survived) <- c("Dead", "Survived")
str(titanic[,c("Embarked","Survived")])
titanic$Survived <- as.factor(titanic$Survived)
str(titanic[,c("Embarked","Survived")])
pie
